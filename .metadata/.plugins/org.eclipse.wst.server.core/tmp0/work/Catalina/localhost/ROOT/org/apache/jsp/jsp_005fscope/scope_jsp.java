/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.45
 * Generated at: 2021-05-18 09:14:18 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jsp_005fscope;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class scope_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>scope</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<h1>scope</h1>\r\n");
      out.write("\t<dl>\r\n");
      out.write("\t\t<dt>page scope</dt>\r\n");
      out.write("\t\t<dd>\r\n");
      out.write("\t\t\tpageContext객체<br> 페이지에 대한 정보를 갖고 있음<br> 하나의 jsp페이지 안에서만 영향을\r\n");
      out.write("\t\t\t미침<br> request객체와 response객체도 가져올수 있음.<br> 예) request.jsp\r\n");
      out.write("\t\t\t페이지와 form01.jsp 페이지 안에 있는 pageContext객체는 다른 객체임.<br>\r\n");
      out.write("\t\t\t");

				JspWriter jspOut = pageContext.getOut();//out객체와 같은 아이!
				HttpServletRequest req = (HttpServletRequest) pageContext.getRequest();
				HttpServletResponse resp = (HttpServletResponse) pageContext.getResponse();
			
      out.write("\r\n");
      out.write("\t\t\t<hr>\r\n");
      out.write("\t\t\t번외) page객체가 따로 있는데 요놈은 this와 같음.\r\n");
      out.write("\t\t\t");
      out.write("\r\n");
      out.write("\t\t</dd>\r\n");
      out.write("\t\t<dt>request scope</dt>\r\n");
      out.write("\t\t<dd>\r\n");
      out.write("\t\t\trequest객체<br> 요청 단위의 범위를 갖는다<br> 하나의 요청에 하나의 객체가 생성된다<br>\r\n");
      out.write("\t\t\t요청내용(파라미터, 클라이언트 정보 등등을 담고있다)<br>\r\n");
      out.write("\t\t</dd>\r\n");
      out.write("\t\t<dt>session scope</dt>\r\n");
      out.write("\t\t<dd>\r\n");
      out.write("\t\t\tsession객체<br> 브라우저 단위의 범위를 갖는다<br> 브라우저가 종료되거나 일정시간이 종료되면\r\n");
      out.write("\t\t\t사라짐<br>\r\n");
      out.write("\t\t</dd>\r\n");
      out.write("\r\n");
      out.write("\t\t<dt>application scope</dt>\r\n");
      out.write("\t\t<dd>\r\n");
      out.write("\t\t\tapplication 객체<br> 어플리케이션 단위의 범위를 가짐<br> 서버가 실행되는 내내 사용되는\r\n");
      out.write("\t\t\t객체\r\n");
      out.write("\t\t</dd>\r\n");
      out.write("\t</dl>\r\n");
      out.write("\t");

		//요 네 아이들은 데이타를 저장할 수 있음.
		//attribute라는 아이로 저장함.
		//setAttribute("이름",데이타);
		//getAttribute("이름");
		pageContext.setAttribute("일번", "일번값");
		request.setAttribute("일번", 100);
		session.setAttribute("일번", 10.10);
		application.setAttribute("일번", true);
	
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
